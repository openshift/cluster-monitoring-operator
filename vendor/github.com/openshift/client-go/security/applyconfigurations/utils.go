// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/security/v1"
	internal "github.com/openshift/client-go/security/applyconfigurations/internal"
	securityv1 "github.com/openshift/client-go/security/applyconfigurations/security/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=security.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("AllowedFlexVolume"):
		return &securityv1.AllowedFlexVolumeApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("FSGroupStrategyOptions"):
		return &securityv1.FSGroupStrategyOptionsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("IDRange"):
		return &securityv1.IDRangeApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("RangeAllocation"):
		return &securityv1.RangeAllocationApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("RunAsUserStrategyOptions"):
		return &securityv1.RunAsUserStrategyOptionsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SecurityContextConstraints"):
		return &securityv1.SecurityContextConstraintsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SELinuxContextStrategyOptions"):
		return &securityv1.SELinuxContextStrategyOptionsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SupplementalGroupsStrategyOptions"):
		return &securityv1.SupplementalGroupsStrategyOptionsApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
