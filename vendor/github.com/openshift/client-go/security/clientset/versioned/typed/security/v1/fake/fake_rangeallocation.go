// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/security/v1"
	securityv1 "github.com/openshift/client-go/security/applyconfigurations/security/v1"
	typedsecurityv1 "github.com/openshift/client-go/security/clientset/versioned/typed/security/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeRangeAllocations implements RangeAllocationInterface
type fakeRangeAllocations struct {
	*gentype.FakeClientWithListAndApply[*v1.RangeAllocation, *v1.RangeAllocationList, *securityv1.RangeAllocationApplyConfiguration]
	Fake *FakeSecurityV1
}

func newFakeRangeAllocations(fake *FakeSecurityV1) typedsecurityv1.RangeAllocationInterface {
	return &fakeRangeAllocations{
		gentype.NewFakeClientWithListAndApply[*v1.RangeAllocation, *v1.RangeAllocationList, *securityv1.RangeAllocationApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("rangeallocations"),
			v1.SchemeGroupVersion.WithKind("RangeAllocation"),
			func() *v1.RangeAllocation { return &v1.RangeAllocation{} },
			func() *v1.RangeAllocationList { return &v1.RangeAllocationList{} },
			func(dst, src *v1.RangeAllocationList) { dst.ListMeta = src.ListMeta },
			func(list *v1.RangeAllocationList) []*v1.RangeAllocation { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.RangeAllocationList, items []*v1.RangeAllocation) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
